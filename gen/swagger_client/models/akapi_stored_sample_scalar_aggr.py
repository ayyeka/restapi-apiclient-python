# coding: utf-8

"""
    RESTAPI Service

    RESTful API  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AkapiStoredSampleScalarAggr(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'agg_values': 'Aggregation',
        'number_of_samples': 'int',
        'start_date': 'datetime',
        'stream_id': 'int'
    }

    attribute_map = {
        'agg_values': 'agg_values',
        'number_of_samples': 'number_of_samples',
        'start_date': 'start_date',
        'stream_id': 'stream_id'
    }

    def __init__(self, agg_values=None, number_of_samples=None, start_date=None, stream_id=None):  # noqa: E501
        """AkapiStoredSampleScalarAggr - a model defined in Swagger"""  # noqa: E501
        self._agg_values = None
        self._number_of_samples = None
        self._start_date = None
        self._stream_id = None
        self.discriminator = None
        self.agg_values = agg_values
        self.number_of_samples = number_of_samples
        self.start_date = start_date
        self.stream_id = stream_id

    @property
    def agg_values(self):
        """Gets the agg_values of this AkapiStoredSampleScalarAggr.  # noqa: E501


        :return: The agg_values of this AkapiStoredSampleScalarAggr.  # noqa: E501
        :rtype: Aggregation
        """
        return self._agg_values

    @agg_values.setter
    def agg_values(self, agg_values):
        """Sets the agg_values of this AkapiStoredSampleScalarAggr.


        :param agg_values: The agg_values of this AkapiStoredSampleScalarAggr.  # noqa: E501
        :type: Aggregation
        """
        if agg_values is None:
            raise ValueError("Invalid value for `agg_values`, must not be `None`")  # noqa: E501

        self._agg_values = agg_values

    @property
    def number_of_samples(self):
        """Gets the number_of_samples of this AkapiStoredSampleScalarAggr.  # noqa: E501

        Number of aggregated samples  # noqa: E501

        :return: The number_of_samples of this AkapiStoredSampleScalarAggr.  # noqa: E501
        :rtype: int
        """
        return self._number_of_samples

    @number_of_samples.setter
    def number_of_samples(self, number_of_samples):
        """Sets the number_of_samples of this AkapiStoredSampleScalarAggr.

        Number of aggregated samples  # noqa: E501

        :param number_of_samples: The number_of_samples of this AkapiStoredSampleScalarAggr.  # noqa: E501
        :type: int
        """
        if number_of_samples is None:
            raise ValueError("Invalid value for `number_of_samples`, must not be `None`")  # noqa: E501

        self._number_of_samples = number_of_samples

    @property
    def start_date(self):
        """Gets the start_date of this AkapiStoredSampleScalarAggr.  # noqa: E501

        Frame start date  # noqa: E501

        :return: The start_date of this AkapiStoredSampleScalarAggr.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this AkapiStoredSampleScalarAggr.

        Frame start date  # noqa: E501

        :param start_date: The start_date of this AkapiStoredSampleScalarAggr.  # noqa: E501
        :type: datetime
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")  # noqa: E501

        self._start_date = start_date

    @property
    def stream_id(self):
        """Gets the stream_id of this AkapiStoredSampleScalarAggr.  # noqa: E501

        Stream ID  # noqa: E501

        :return: The stream_id of this AkapiStoredSampleScalarAggr.  # noqa: E501
        :rtype: int
        """
        return self._stream_id

    @stream_id.setter
    def stream_id(self, stream_id):
        """Sets the stream_id of this AkapiStoredSampleScalarAggr.

        Stream ID  # noqa: E501

        :param stream_id: The stream_id of this AkapiStoredSampleScalarAggr.  # noqa: E501
        :type: int
        """
        if stream_id is None:
            raise ValueError("Invalid value for `stream_id`, must not be `None`")  # noqa: E501

        self._stream_id = stream_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AkapiStoredSampleScalarAggr, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AkapiStoredSampleScalarAggr):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
