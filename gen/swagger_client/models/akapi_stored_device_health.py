# coding: utf-8

"""
    RESTAPI Service

    RESTful API  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AkapiStoredDeviceHealth(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'counter_type_id': 'int',
        'device_id': 'int',
        'id': 'int',
        'sample_date': 'datetime',
        'value': 'int'
    }

    attribute_map = {
        'counter_type_id': 'counter_type_id',
        'device_id': 'device_id',
        'id': 'id',
        'sample_date': 'sample_date',
        'value': 'value'
    }

    def __init__(self, counter_type_id=None, device_id=None, id=None, sample_date=None, value=None):  # noqa: E501
        """AkapiStoredDeviceHealth - a model defined in Swagger"""  # noqa: E501
        self._counter_type_id = None
        self._device_id = None
        self._id = None
        self._sample_date = None
        self._value = None
        self.discriminator = None
        self.counter_type_id = counter_type_id
        self.device_id = device_id
        self.id = id
        self.sample_date = sample_date
        self.value = value

    @property
    def counter_type_id(self):
        """Gets the counter_type_id of this AkapiStoredDeviceHealth.  # noqa: E501

        Counter type ID  # noqa: E501

        :return: The counter_type_id of this AkapiStoredDeviceHealth.  # noqa: E501
        :rtype: int
        """
        return self._counter_type_id

    @counter_type_id.setter
    def counter_type_id(self, counter_type_id):
        """Sets the counter_type_id of this AkapiStoredDeviceHealth.

        Counter type ID  # noqa: E501

        :param counter_type_id: The counter_type_id of this AkapiStoredDeviceHealth.  # noqa: E501
        :type: int
        """
        if counter_type_id is None:
            raise ValueError("Invalid value for `counter_type_id`, must not be `None`")  # noqa: E501

        self._counter_type_id = counter_type_id

    @property
    def device_id(self):
        """Gets the device_id of this AkapiStoredDeviceHealth.  # noqa: E501

        Device ID of device health  # noqa: E501

        :return: The device_id of this AkapiStoredDeviceHealth.  # noqa: E501
        :rtype: int
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this AkapiStoredDeviceHealth.

        Device ID of device health  # noqa: E501

        :param device_id: The device_id of this AkapiStoredDeviceHealth.  # noqa: E501
        :type: int
        """
        if device_id is None:
            raise ValueError("Invalid value for `device_id`, must not be `None`")  # noqa: E501

        self._device_id = device_id

    @property
    def id(self):
        """Gets the id of this AkapiStoredDeviceHealth.  # noqa: E501

        ID is the unique id of the device health.  # noqa: E501

        :return: The id of this AkapiStoredDeviceHealth.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AkapiStoredDeviceHealth.

        ID is the unique id of the device health.  # noqa: E501

        :param id: The id of this AkapiStoredDeviceHealth.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def sample_date(self):
        """Gets the sample_date of this AkapiStoredDeviceHealth.  # noqa: E501

        Date of sample  # noqa: E501

        :return: The sample_date of this AkapiStoredDeviceHealth.  # noqa: E501
        :rtype: datetime
        """
        return self._sample_date

    @sample_date.setter
    def sample_date(self, sample_date):
        """Sets the sample_date of this AkapiStoredDeviceHealth.

        Date of sample  # noqa: E501

        :param sample_date: The sample_date of this AkapiStoredDeviceHealth.  # noqa: E501
        :type: datetime
        """
        if sample_date is None:
            raise ValueError("Invalid value for `sample_date`, must not be `None`")  # noqa: E501

        self._sample_date = sample_date

    @property
    def value(self):
        """Gets the value of this AkapiStoredDeviceHealth.  # noqa: E501

        Value  # noqa: E501

        :return: The value of this AkapiStoredDeviceHealth.  # noqa: E501
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this AkapiStoredDeviceHealth.

        Value  # noqa: E501

        :param value: The value of this AkapiStoredDeviceHealth.  # noqa: E501
        :type: int
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AkapiStoredDeviceHealth, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AkapiStoredDeviceHealth):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
