# coding: utf-8

"""
    RESTAPI Service

    RESTful API  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AkapiStoredChannel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'creation_date': 'datetime',
        'device_id': 'int',
        'display_name': 'str',
        'display_status_name': 'str',
        'id': 'int',
        'on_device_num': 'int',
        'status_id': 'int',
        'type_display_name': 'str',
        'type_id': 'int'
    }

    attribute_map = {
        'creation_date': 'creation_date',
        'device_id': 'device_id',
        'display_name': 'display_name',
        'display_status_name': 'display_status_name',
        'id': 'id',
        'on_device_num': 'on_device_num',
        'status_id': 'status_id',
        'type_display_name': 'type_display_name',
        'type_id': 'type_id'
    }

    def __init__(self, creation_date=None, device_id=None, display_name=None, display_status_name=None, id=None, on_device_num=None, status_id=None, type_display_name=None, type_id=None):  # noqa: E501
        """AkapiStoredChannel - a model defined in Swagger"""  # noqa: E501
        self._creation_date = None
        self._device_id = None
        self._display_name = None
        self._display_status_name = None
        self._id = None
        self._on_device_num = None
        self._status_id = None
        self._type_display_name = None
        self._type_id = None
        self.discriminator = None
        self.creation_date = creation_date
        self.device_id = device_id
        self.display_name = display_name
        self.display_status_name = display_status_name
        self.id = id
        self.on_device_num = on_device_num
        self.status_id = status_id
        self.type_display_name = type_display_name
        self.type_id = type_id

    @property
    def creation_date(self):
        """Gets the creation_date of this AkapiStoredChannel.  # noqa: E501

        Creation date  # noqa: E501

        :return: The creation_date of this AkapiStoredChannel.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this AkapiStoredChannel.

        Creation date  # noqa: E501

        :param creation_date: The creation_date of this AkapiStoredChannel.  # noqa: E501
        :type: datetime
        """
        if creation_date is None:
            raise ValueError("Invalid value for `creation_date`, must not be `None`")  # noqa: E501

        self._creation_date = creation_date

    @property
    def device_id(self):
        """Gets the device_id of this AkapiStoredChannel.  # noqa: E501

        Device ID  # noqa: E501

        :return: The device_id of this AkapiStoredChannel.  # noqa: E501
        :rtype: int
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this AkapiStoredChannel.

        Device ID  # noqa: E501

        :param device_id: The device_id of this AkapiStoredChannel.  # noqa: E501
        :type: int
        """
        if device_id is None:
            raise ValueError("Invalid value for `device_id`, must not be `None`")  # noqa: E501

        self._device_id = device_id

    @property
    def display_name(self):
        """Gets the display_name of this AkapiStoredChannel.  # noqa: E501

        Channel name  # noqa: E501

        :return: The display_name of this AkapiStoredChannel.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this AkapiStoredChannel.

        Channel name  # noqa: E501

        :param display_name: The display_name of this AkapiStoredChannel.  # noqa: E501
        :type: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")  # noqa: E501

        self._display_name = display_name

    @property
    def display_status_name(self):
        """Gets the display_status_name of this AkapiStoredChannel.  # noqa: E501

        Status name  # noqa: E501

        :return: The display_status_name of this AkapiStoredChannel.  # noqa: E501
        :rtype: str
        """
        return self._display_status_name

    @display_status_name.setter
    def display_status_name(self, display_status_name):
        """Sets the display_status_name of this AkapiStoredChannel.

        Status name  # noqa: E501

        :param display_status_name: The display_status_name of this AkapiStoredChannel.  # noqa: E501
        :type: str
        """
        if display_status_name is None:
            raise ValueError("Invalid value for `display_status_name`, must not be `None`")  # noqa: E501

        self._display_status_name = display_status_name

    @property
    def id(self):
        """Gets the id of this AkapiStoredChannel.  # noqa: E501

        ID is the unique id of the channel.  # noqa: E501

        :return: The id of this AkapiStoredChannel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AkapiStoredChannel.

        ID is the unique id of the channel.  # noqa: E501

        :param id: The id of this AkapiStoredChannel.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def on_device_num(self):
        """Gets the on_device_num of this AkapiStoredChannel.  # noqa: E501

        On device number  # noqa: E501

        :return: The on_device_num of this AkapiStoredChannel.  # noqa: E501
        :rtype: int
        """
        return self._on_device_num

    @on_device_num.setter
    def on_device_num(self, on_device_num):
        """Sets the on_device_num of this AkapiStoredChannel.

        On device number  # noqa: E501

        :param on_device_num: The on_device_num of this AkapiStoredChannel.  # noqa: E501
        :type: int
        """
        if on_device_num is None:
            raise ValueError("Invalid value for `on_device_num`, must not be `None`")  # noqa: E501

        self._on_device_num = on_device_num

    @property
    def status_id(self):
        """Gets the status_id of this AkapiStoredChannel.  # noqa: E501

        Status ID  # noqa: E501

        :return: The status_id of this AkapiStoredChannel.  # noqa: E501
        :rtype: int
        """
        return self._status_id

    @status_id.setter
    def status_id(self, status_id):
        """Sets the status_id of this AkapiStoredChannel.

        Status ID  # noqa: E501

        :param status_id: The status_id of this AkapiStoredChannel.  # noqa: E501
        :type: int
        """
        if status_id is None:
            raise ValueError("Invalid value for `status_id`, must not be `None`")  # noqa: E501

        self._status_id = status_id

    @property
    def type_display_name(self):
        """Gets the type_display_name of this AkapiStoredChannel.  # noqa: E501

        Type name  # noqa: E501

        :return: The type_display_name of this AkapiStoredChannel.  # noqa: E501
        :rtype: str
        """
        return self._type_display_name

    @type_display_name.setter
    def type_display_name(self, type_display_name):
        """Sets the type_display_name of this AkapiStoredChannel.

        Type name  # noqa: E501

        :param type_display_name: The type_display_name of this AkapiStoredChannel.  # noqa: E501
        :type: str
        """
        if type_display_name is None:
            raise ValueError("Invalid value for `type_display_name`, must not be `None`")  # noqa: E501

        self._type_display_name = type_display_name

    @property
    def type_id(self):
        """Gets the type_id of this AkapiStoredChannel.  # noqa: E501

        Type ID  # noqa: E501

        :return: The type_id of this AkapiStoredChannel.  # noqa: E501
        :rtype: int
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this AkapiStoredChannel.

        Type ID  # noqa: E501

        :param type_id: The type_id of this AkapiStoredChannel.  # noqa: E501
        :type: int
        """
        if type_id is None:
            raise ValueError("Invalid value for `type_id`, must not be `None`")  # noqa: E501

        self._type_id = type_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AkapiStoredChannel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AkapiStoredChannel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
