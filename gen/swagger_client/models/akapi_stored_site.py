# coding: utf-8

"""
    RESTAPI Service

    RESTful API  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AkapiStoredSite(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_organization_id': 'int',
        'creation_date': 'datetime',
        'display_name': 'str',
        'id': 'int',
        'latitude': 'str',
        'longitude': 'str',
        'status': 'str'
    }

    attribute_map = {
        'account_organization_id': 'account_organization_id',
        'creation_date': 'creation_date',
        'display_name': 'display_name',
        'id': 'id',
        'latitude': 'latitude',
        'longitude': 'longitude',
        'status': 'status'
    }

    def __init__(self, account_organization_id=None, creation_date=None, display_name=None, id=None, latitude=None, longitude=None, status=None):  # noqa: E501
        """AkapiStoredSite - a model defined in Swagger"""  # noqa: E501
        self._account_organization_id = None
        self._creation_date = None
        self._display_name = None
        self._id = None
        self._latitude = None
        self._longitude = None
        self._status = None
        self.discriminator = None
        if account_organization_id is not None:
            self.account_organization_id = account_organization_id
        self.creation_date = creation_date
        self.display_name = display_name
        self.id = id
        self.latitude = latitude
        self.longitude = longitude
        self.status = status

    @property
    def account_organization_id(self):
        """Gets the account_organization_id of this AkapiStoredSite.  # noqa: E501

        Account organization ID  # noqa: E501

        :return: The account_organization_id of this AkapiStoredSite.  # noqa: E501
        :rtype: int
        """
        return self._account_organization_id

    @account_organization_id.setter
    def account_organization_id(self, account_organization_id):
        """Sets the account_organization_id of this AkapiStoredSite.

        Account organization ID  # noqa: E501

        :param account_organization_id: The account_organization_id of this AkapiStoredSite.  # noqa: E501
        :type: int
        """

        self._account_organization_id = account_organization_id

    @property
    def creation_date(self):
        """Gets the creation_date of this AkapiStoredSite.  # noqa: E501

        Creation date  # noqa: E501

        :return: The creation_date of this AkapiStoredSite.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this AkapiStoredSite.

        Creation date  # noqa: E501

        :param creation_date: The creation_date of this AkapiStoredSite.  # noqa: E501
        :type: datetime
        """
        if creation_date is None:
            raise ValueError("Invalid value for `creation_date`, must not be `None`")  # noqa: E501

        self._creation_date = creation_date

    @property
    def display_name(self):
        """Gets the display_name of this AkapiStoredSite.  # noqa: E501

        Display name  # noqa: E501

        :return: The display_name of this AkapiStoredSite.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this AkapiStoredSite.

        Display name  # noqa: E501

        :param display_name: The display_name of this AkapiStoredSite.  # noqa: E501
        :type: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")  # noqa: E501

        self._display_name = display_name

    @property
    def id(self):
        """Gets the id of this AkapiStoredSite.  # noqa: E501

        ID is the unique id of the site.  # noqa: E501

        :return: The id of this AkapiStoredSite.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AkapiStoredSite.

        ID is the unique id of the site.  # noqa: E501

        :param id: The id of this AkapiStoredSite.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def latitude(self):
        """Gets the latitude of this AkapiStoredSite.  # noqa: E501

        Site's Latitude  # noqa: E501

        :return: The latitude of this AkapiStoredSite.  # noqa: E501
        :rtype: str
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this AkapiStoredSite.

        Site's Latitude  # noqa: E501

        :param latitude: The latitude of this AkapiStoredSite.  # noqa: E501
        :type: str
        """
        if latitude is None:
            raise ValueError("Invalid value for `latitude`, must not be `None`")  # noqa: E501

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this AkapiStoredSite.  # noqa: E501

        Site's Longitude  # noqa: E501

        :return: The longitude of this AkapiStoredSite.  # noqa: E501
        :rtype: str
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this AkapiStoredSite.

        Site's Longitude  # noqa: E501

        :param longitude: The longitude of this AkapiStoredSite.  # noqa: E501
        :type: str
        """
        if longitude is None:
            raise ValueError("Invalid value for `longitude`, must not be `None`")  # noqa: E501

        self._longitude = longitude

    @property
    def status(self):
        """Gets the status of this AkapiStoredSite.  # noqa: E501

        Status display name  # noqa: E501

        :return: The status of this AkapiStoredSite.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AkapiStoredSite.

        Status display name  # noqa: E501

        :param status: The status of this AkapiStoredSite.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AkapiStoredSite, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AkapiStoredSite):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
