# coding: utf-8

"""
    RESTAPI Service

    RESTful API  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GPS(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'altitude': 'float',
        '_date': 'datetime',
        'dilution_of_precision': 'float',
        'latitude': 'float',
        'longitude': 'float',
        'number_of_satellites': 'int'
    }

    attribute_map = {
        'altitude': 'altitude',
        '_date': 'date',
        'dilution_of_precision': 'dilution_of_precision',
        'latitude': 'latitude',
        'longitude': 'longitude',
        'number_of_satellites': 'number_of_satellites'
    }

    def __init__(self, altitude=None, _date=None, dilution_of_precision=None, latitude=None, longitude=None, number_of_satellites=None):  # noqa: E501
        """GPS - a model defined in Swagger"""  # noqa: E501
        self._altitude = None
        self.__date = None
        self._dilution_of_precision = None
        self._latitude = None
        self._longitude = None
        self._number_of_satellites = None
        self.discriminator = None
        self.altitude = altitude
        self._date = _date
        self.dilution_of_precision = dilution_of_precision
        self.latitude = latitude
        self.longitude = longitude
        self.number_of_satellites = number_of_satellites

    @property
    def altitude(self):
        """Gets the altitude of this GPS.  # noqa: E501

        Altitude  # noqa: E501

        :return: The altitude of this GPS.  # noqa: E501
        :rtype: float
        """
        return self._altitude

    @altitude.setter
    def altitude(self, altitude):
        """Sets the altitude of this GPS.

        Altitude  # noqa: E501

        :param altitude: The altitude of this GPS.  # noqa: E501
        :type: float
        """
        if altitude is None:
            raise ValueError("Invalid value for `altitude`, must not be `None`")  # noqa: E501

        self._altitude = altitude

    @property
    def _date(self):
        """Gets the _date of this GPS.  # noqa: E501

        Date of sample  # noqa: E501

        :return: The _date of this GPS.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this GPS.

        Date of sample  # noqa: E501

        :param _date: The _date of this GPS.  # noqa: E501
        :type: datetime
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    @property
    def dilution_of_precision(self):
        """Gets the dilution_of_precision of this GPS.  # noqa: E501

        Dilution of precision  # noqa: E501

        :return: The dilution_of_precision of this GPS.  # noqa: E501
        :rtype: float
        """
        return self._dilution_of_precision

    @dilution_of_precision.setter
    def dilution_of_precision(self, dilution_of_precision):
        """Sets the dilution_of_precision of this GPS.

        Dilution of precision  # noqa: E501

        :param dilution_of_precision: The dilution_of_precision of this GPS.  # noqa: E501
        :type: float
        """
        if dilution_of_precision is None:
            raise ValueError("Invalid value for `dilution_of_precision`, must not be `None`")  # noqa: E501

        self._dilution_of_precision = dilution_of_precision

    @property
    def latitude(self):
        """Gets the latitude of this GPS.  # noqa: E501

        Latitude  # noqa: E501

        :return: The latitude of this GPS.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this GPS.

        Latitude  # noqa: E501

        :param latitude: The latitude of this GPS.  # noqa: E501
        :type: float
        """
        if latitude is None:
            raise ValueError("Invalid value for `latitude`, must not be `None`")  # noqa: E501

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this GPS.  # noqa: E501

        Longitude  # noqa: E501

        :return: The longitude of this GPS.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this GPS.

        Longitude  # noqa: E501

        :param longitude: The longitude of this GPS.  # noqa: E501
        :type: float
        """
        if longitude is None:
            raise ValueError("Invalid value for `longitude`, must not be `None`")  # noqa: E501

        self._longitude = longitude

    @property
    def number_of_satellites(self):
        """Gets the number_of_satellites of this GPS.  # noqa: E501

        Number of satellites  # noqa: E501

        :return: The number_of_satellites of this GPS.  # noqa: E501
        :rtype: int
        """
        return self._number_of_satellites

    @number_of_satellites.setter
    def number_of_satellites(self, number_of_satellites):
        """Sets the number_of_satellites of this GPS.

        Number of satellites  # noqa: E501

        :param number_of_satellites: The number_of_satellites of this GPS.  # noqa: E501
        :type: int
        """
        if number_of_satellites is None:
            raise ValueError("Invalid value for `number_of_satellites`, must not be `None`")  # noqa: E501

        self._number_of_satellites = number_of_satellites

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GPS, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GPS):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
