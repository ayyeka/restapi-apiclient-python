# coding: utf-8

"""
    RESTAPI Service

    RESTful API  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ThresholdActionNotification(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'num_repeats_all_on_failed': 'int',
        'relevance_threshold': 'int',
        'repeats_per_user_on_failed': 'int',
        'type': 'str',
        'user_group_id': 'int'
    }

    attribute_map = {
        'num_repeats_all_on_failed': 'num_repeats_all_on_failed',
        'relevance_threshold': 'relevance_threshold',
        'repeats_per_user_on_failed': 'repeats_per_user_on_failed',
        'type': 'type',
        'user_group_id': 'user_group_id'
    }

    def __init__(self, num_repeats_all_on_failed=None, relevance_threshold=None, repeats_per_user_on_failed=None, type=None, user_group_id=None):  # noqa: E501
        """ThresholdActionNotification - a model defined in Swagger"""  # noqa: E501
        self._num_repeats_all_on_failed = None
        self._relevance_threshold = None
        self._repeats_per_user_on_failed = None
        self._type = None
        self._user_group_id = None
        self.discriminator = None
        self.num_repeats_all_on_failed = num_repeats_all_on_failed
        self.relevance_threshold = relevance_threshold
        self.repeats_per_user_on_failed = repeats_per_user_on_failed
        self.type = type
        self.user_group_id = user_group_id

    @property
    def num_repeats_all_on_failed(self):
        """Gets the num_repeats_all_on_failed of this ThresholdActionNotification.  # noqa: E501

        Defines how many times voice notification would be repeated on entire group of users  # noqa: E501

        :return: The num_repeats_all_on_failed of this ThresholdActionNotification.  # noqa: E501
        :rtype: int
        """
        return self._num_repeats_all_on_failed

    @num_repeats_all_on_failed.setter
    def num_repeats_all_on_failed(self, num_repeats_all_on_failed):
        """Sets the num_repeats_all_on_failed of this ThresholdActionNotification.

        Defines how many times voice notification would be repeated on entire group of users  # noqa: E501

        :param num_repeats_all_on_failed: The num_repeats_all_on_failed of this ThresholdActionNotification.  # noqa: E501
        :type: int
        """
        if num_repeats_all_on_failed is None:
            raise ValueError("Invalid value for `num_repeats_all_on_failed`, must not be `None`")  # noqa: E501

        self._num_repeats_all_on_failed = num_repeats_all_on_failed

    @property
    def relevance_threshold(self):
        """Gets the relevance_threshold of this ThresholdActionNotification.  # noqa: E501

        Whats that for..?  # noqa: E501

        :return: The relevance_threshold of this ThresholdActionNotification.  # noqa: E501
        :rtype: int
        """
        return self._relevance_threshold

    @relevance_threshold.setter
    def relevance_threshold(self, relevance_threshold):
        """Sets the relevance_threshold of this ThresholdActionNotification.

        Whats that for..?  # noqa: E501

        :param relevance_threshold: The relevance_threshold of this ThresholdActionNotification.  # noqa: E501
        :type: int
        """
        if relevance_threshold is None:
            raise ValueError("Invalid value for `relevance_threshold`, must not be `None`")  # noqa: E501

        self._relevance_threshold = relevance_threshold

    @property
    def repeats_per_user_on_failed(self):
        """Gets the repeats_per_user_on_failed of this ThresholdActionNotification.  # noqa: E501

        Defines how many times voice notification would be repeated before trying the another user (in pre defined userGroup)  # noqa: E501

        :return: The repeats_per_user_on_failed of this ThresholdActionNotification.  # noqa: E501
        :rtype: int
        """
        return self._repeats_per_user_on_failed

    @repeats_per_user_on_failed.setter
    def repeats_per_user_on_failed(self, repeats_per_user_on_failed):
        """Sets the repeats_per_user_on_failed of this ThresholdActionNotification.

        Defines how many times voice notification would be repeated before trying the another user (in pre defined userGroup)  # noqa: E501

        :param repeats_per_user_on_failed: The repeats_per_user_on_failed of this ThresholdActionNotification.  # noqa: E501
        :type: int
        """
        if repeats_per_user_on_failed is None:
            raise ValueError("Invalid value for `repeats_per_user_on_failed`, must not be `None`")  # noqa: E501

        self._repeats_per_user_on_failed = repeats_per_user_on_failed

    @property
    def type(self):
        """Gets the type of this ThresholdActionNotification.  # noqa: E501

        Type of notification action  # noqa: E501

        :return: The type of this ThresholdActionNotification.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ThresholdActionNotification.

        Type of notification action  # noqa: E501

        :param type: The type of this ThresholdActionNotification.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["mail", "sms", "ticketSystem", "voice"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def user_group_id(self):
        """Gets the user_group_id of this ThresholdActionNotification.  # noqa: E501

        Group Id that user is belonged to, this value should be of existed group and only the group that you have a permission access to  # noqa: E501

        :return: The user_group_id of this ThresholdActionNotification.  # noqa: E501
        :rtype: int
        """
        return self._user_group_id

    @user_group_id.setter
    def user_group_id(self, user_group_id):
        """Sets the user_group_id of this ThresholdActionNotification.

        Group Id that user is belonged to, this value should be of existed group and only the group that you have a permission access to  # noqa: E501

        :param user_group_id: The user_group_id of this ThresholdActionNotification.  # noqa: E501
        :type: int
        """
        if user_group_id is None:
            raise ValueError("Invalid value for `user_group_id`, must not be `None`")  # noqa: E501

        self._user_group_id = user_group_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ThresholdActionNotification, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ThresholdActionNotification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
