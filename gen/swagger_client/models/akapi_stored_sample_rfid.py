# coding: utf-8

"""
    RESTAPI Service

    RESTful API  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AkapiStoredSampleRfid(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'end_date': 'datetime',
        'gps_location_info': 'GPS',
        'id': 'int',
        'sample_date': 'datetime',
        'start_date': 'datetime',
        'stream_id': 'int',
        'tag_ids': 'str'
    }

    attribute_map = {
        'end_date': 'end_date',
        'gps_location_info': 'gps_location_info',
        'id': 'id',
        'sample_date': 'sample_date',
        'start_date': 'start_date',
        'stream_id': 'stream_id',
        'tag_ids': 'tag_ids'
    }

    def __init__(self, end_date=None, gps_location_info=None, id=None, sample_date=None, start_date=None, stream_id=None, tag_ids=None):  # noqa: E501
        """AkapiStoredSampleRfid - a model defined in Swagger"""  # noqa: E501
        self._end_date = None
        self._gps_location_info = None
        self._id = None
        self._sample_date = None
        self._start_date = None
        self._stream_id = None
        self._tag_ids = None
        self.discriminator = None
        self.end_date = end_date
        self.gps_location_info = gps_location_info
        self.id = id
        self.sample_date = sample_date
        self.start_date = start_date
        self.stream_id = stream_id
        self.tag_ids = tag_ids

    @property
    def end_date(self):
        """Gets the end_date of this AkapiStoredSampleRfid.  # noqa: E501

        End date  # noqa: E501

        :return: The end_date of this AkapiStoredSampleRfid.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this AkapiStoredSampleRfid.

        End date  # noqa: E501

        :param end_date: The end_date of this AkapiStoredSampleRfid.  # noqa: E501
        :type: datetime
        """
        if end_date is None:
            raise ValueError("Invalid value for `end_date`, must not be `None`")  # noqa: E501

        self._end_date = end_date

    @property
    def gps_location_info(self):
        """Gets the gps_location_info of this AkapiStoredSampleRfid.  # noqa: E501


        :return: The gps_location_info of this AkapiStoredSampleRfid.  # noqa: E501
        :rtype: GPS
        """
        return self._gps_location_info

    @gps_location_info.setter
    def gps_location_info(self, gps_location_info):
        """Sets the gps_location_info of this AkapiStoredSampleRfid.


        :param gps_location_info: The gps_location_info of this AkapiStoredSampleRfid.  # noqa: E501
        :type: GPS
        """
        if gps_location_info is None:
            raise ValueError("Invalid value for `gps_location_info`, must not be `None`")  # noqa: E501

        self._gps_location_info = gps_location_info

    @property
    def id(self):
        """Gets the id of this AkapiStoredSampleRfid.  # noqa: E501

        ID is the unique id of the sample RFID.  # noqa: E501

        :return: The id of this AkapiStoredSampleRfid.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AkapiStoredSampleRfid.

        ID is the unique id of the sample RFID.  # noqa: E501

        :param id: The id of this AkapiStoredSampleRfid.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def sample_date(self):
        """Gets the sample_date of this AkapiStoredSampleRfid.  # noqa: E501

        Sample date  # noqa: E501

        :return: The sample_date of this AkapiStoredSampleRfid.  # noqa: E501
        :rtype: datetime
        """
        return self._sample_date

    @sample_date.setter
    def sample_date(self, sample_date):
        """Sets the sample_date of this AkapiStoredSampleRfid.

        Sample date  # noqa: E501

        :param sample_date: The sample_date of this AkapiStoredSampleRfid.  # noqa: E501
        :type: datetime
        """
        if sample_date is None:
            raise ValueError("Invalid value for `sample_date`, must not be `None`")  # noqa: E501

        self._sample_date = sample_date

    @property
    def start_date(self):
        """Gets the start_date of this AkapiStoredSampleRfid.  # noqa: E501

        Start date  # noqa: E501

        :return: The start_date of this AkapiStoredSampleRfid.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this AkapiStoredSampleRfid.

        Start date  # noqa: E501

        :param start_date: The start_date of this AkapiStoredSampleRfid.  # noqa: E501
        :type: datetime
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")  # noqa: E501

        self._start_date = start_date

    @property
    def stream_id(self):
        """Gets the stream_id of this AkapiStoredSampleRfid.  # noqa: E501

        Stream ID  # noqa: E501

        :return: The stream_id of this AkapiStoredSampleRfid.  # noqa: E501
        :rtype: int
        """
        return self._stream_id

    @stream_id.setter
    def stream_id(self, stream_id):
        """Sets the stream_id of this AkapiStoredSampleRfid.

        Stream ID  # noqa: E501

        :param stream_id: The stream_id of this AkapiStoredSampleRfid.  # noqa: E501
        :type: int
        """
        if stream_id is None:
            raise ValueError("Invalid value for `stream_id`, must not be `None`")  # noqa: E501

        self._stream_id = stream_id

    @property
    def tag_ids(self):
        """Gets the tag_ids of this AkapiStoredSampleRfid.  # noqa: E501

        Tag IDs  # noqa: E501

        :return: The tag_ids of this AkapiStoredSampleRfid.  # noqa: E501
        :rtype: str
        """
        return self._tag_ids

    @tag_ids.setter
    def tag_ids(self, tag_ids):
        """Sets the tag_ids of this AkapiStoredSampleRfid.

        Tag IDs  # noqa: E501

        :param tag_ids: The tag_ids of this AkapiStoredSampleRfid.  # noqa: E501
        :type: str
        """
        if tag_ids is None:
            raise ValueError("Invalid value for `tag_ids`, must not be `None`")  # noqa: E501

        self._tag_ids = tag_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AkapiStoredSampleRfid, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AkapiStoredSampleRfid):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
