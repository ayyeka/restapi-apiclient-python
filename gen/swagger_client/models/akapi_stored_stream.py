# coding: utf-8

"""
    RESTAPI Service

    RESTful API  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AkapiStoredStream(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'creation_date': 'datetime',
        'display_name': 'str',
        'id': 'int',
        'site_id': 'int',
        'status_id': 'int',
        'type_display_name': 'str',
        'type_id': 'int',
        'units': 'str',
        'value_scale': 'str'
    }

    attribute_map = {
        'creation_date': 'creation_date',
        'display_name': 'display_name',
        'id': 'id',
        'site_id': 'site_id',
        'status_id': 'status_id',
        'type_display_name': 'type_display_name',
        'type_id': 'type_id',
        'units': 'units',
        'value_scale': 'value_scale'
    }

    def __init__(self, creation_date=None, display_name=None, id=None, site_id=None, status_id=None, type_display_name=None, type_id=None, units=None, value_scale=None):  # noqa: E501
        """AkapiStoredStream - a model defined in Swagger"""  # noqa: E501
        self._creation_date = None
        self._display_name = None
        self._id = None
        self._site_id = None
        self._status_id = None
        self._type_display_name = None
        self._type_id = None
        self._units = None
        self._value_scale = None
        self.discriminator = None
        self.creation_date = creation_date
        self.display_name = display_name
        self.id = id
        self.site_id = site_id
        self.status_id = status_id
        self.type_display_name = type_display_name
        self.type_id = type_id
        self.units = units
        self.value_scale = value_scale

    @property
    def creation_date(self):
        """Gets the creation_date of this AkapiStoredStream.  # noqa: E501

        Creation date  # noqa: E501

        :return: The creation_date of this AkapiStoredStream.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this AkapiStoredStream.

        Creation date  # noqa: E501

        :param creation_date: The creation_date of this AkapiStoredStream.  # noqa: E501
        :type: datetime
        """
        if creation_date is None:
            raise ValueError("Invalid value for `creation_date`, must not be `None`")  # noqa: E501

        self._creation_date = creation_date

    @property
    def display_name(self):
        """Gets the display_name of this AkapiStoredStream.  # noqa: E501

        Display name  # noqa: E501

        :return: The display_name of this AkapiStoredStream.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this AkapiStoredStream.

        Display name  # noqa: E501

        :param display_name: The display_name of this AkapiStoredStream.  # noqa: E501
        :type: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")  # noqa: E501

        self._display_name = display_name

    @property
    def id(self):
        """Gets the id of this AkapiStoredStream.  # noqa: E501

        ID is the unique id of the stream.  # noqa: E501

        :return: The id of this AkapiStoredStream.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AkapiStoredStream.

        ID is the unique id of the stream.  # noqa: E501

        :param id: The id of this AkapiStoredStream.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def site_id(self):
        """Gets the site_id of this AkapiStoredStream.  # noqa: E501

        Site ID  # noqa: E501

        :return: The site_id of this AkapiStoredStream.  # noqa: E501
        :rtype: int
        """
        return self._site_id

    @site_id.setter
    def site_id(self, site_id):
        """Sets the site_id of this AkapiStoredStream.

        Site ID  # noqa: E501

        :param site_id: The site_id of this AkapiStoredStream.  # noqa: E501
        :type: int
        """
        if site_id is None:
            raise ValueError("Invalid value for `site_id`, must not be `None`")  # noqa: E501

        self._site_id = site_id

    @property
    def status_id(self):
        """Gets the status_id of this AkapiStoredStream.  # noqa: E501

        Status ID  # noqa: E501

        :return: The status_id of this AkapiStoredStream.  # noqa: E501
        :rtype: int
        """
        return self._status_id

    @status_id.setter
    def status_id(self, status_id):
        """Sets the status_id of this AkapiStoredStream.

        Status ID  # noqa: E501

        :param status_id: The status_id of this AkapiStoredStream.  # noqa: E501
        :type: int
        """
        if status_id is None:
            raise ValueError("Invalid value for `status_id`, must not be `None`")  # noqa: E501

        self._status_id = status_id

    @property
    def type_display_name(self):
        """Gets the type_display_name of this AkapiStoredStream.  # noqa: E501

        Type display name  # noqa: E501

        :return: The type_display_name of this AkapiStoredStream.  # noqa: E501
        :rtype: str
        """
        return self._type_display_name

    @type_display_name.setter
    def type_display_name(self, type_display_name):
        """Sets the type_display_name of this AkapiStoredStream.

        Type display name  # noqa: E501

        :param type_display_name: The type_display_name of this AkapiStoredStream.  # noqa: E501
        :type: str
        """
        if type_display_name is None:
            raise ValueError("Invalid value for `type_display_name`, must not be `None`")  # noqa: E501

        self._type_display_name = type_display_name

    @property
    def type_id(self):
        """Gets the type_id of this AkapiStoredStream.  # noqa: E501

        Type ID  # noqa: E501

        :return: The type_id of this AkapiStoredStream.  # noqa: E501
        :rtype: int
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this AkapiStoredStream.

        Type ID  # noqa: E501

        :param type_id: The type_id of this AkapiStoredStream.  # noqa: E501
        :type: int
        """
        if type_id is None:
            raise ValueError("Invalid value for `type_id`, must not be `None`")  # noqa: E501

        self._type_id = type_id

    @property
    def units(self):
        """Gets the units of this AkapiStoredStream.  # noqa: E501

        Units  # noqa: E501

        :return: The units of this AkapiStoredStream.  # noqa: E501
        :rtype: str
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this AkapiStoredStream.

        Units  # noqa: E501

        :param units: The units of this AkapiStoredStream.  # noqa: E501
        :type: str
        """
        if units is None:
            raise ValueError("Invalid value for `units`, must not be `None`")  # noqa: E501

        self._units = units

    @property
    def value_scale(self):
        """Gets the value_scale of this AkapiStoredStream.  # noqa: E501

        Value scale  # noqa: E501

        :return: The value_scale of this AkapiStoredStream.  # noqa: E501
        :rtype: str
        """
        return self._value_scale

    @value_scale.setter
    def value_scale(self, value_scale):
        """Sets the value_scale of this AkapiStoredStream.

        Value scale  # noqa: E501

        :param value_scale: The value_scale of this AkapiStoredStream.  # noqa: E501
        :type: str
        """
        if value_scale is None:
            raise ValueError("Invalid value for `value_scale`, must not be `None`")  # noqa: E501

        self._value_scale = value_scale

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AkapiStoredStream, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AkapiStoredStream):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
