# coding: utf-8

"""
    RESTAPI Service

    RESTful API  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ThresholdActionSample(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sample_group_id': 'int',
        'stream_id': 'int',
        'type': 'str'
    }

    attribute_map = {
        'sample_group_id': 'sample_group_id',
        'stream_id': 'stream_id',
        'type': 'type'
    }

    def __init__(self, sample_group_id=None, stream_id=None, type=None):  # noqa: E501
        """ThresholdActionSample - a model defined in Swagger"""  # noqa: E501
        self._sample_group_id = None
        self._stream_id = None
        self._type = None
        self.discriminator = None
        if sample_group_id is not None:
            self.sample_group_id = sample_group_id
        self.stream_id = stream_id
        self.type = type

    @property
    def sample_group_id(self):
        """Gets the sample_group_id of this ThresholdActionSample.  # noqa: E501

        SampleGroupID is the id of the group that channel is belong to (maximum 2 groups). On this group sample settings of a Wavelet would be applied. This id must be of an existing sample group. In order to set up the stream_id field SampleGroupID field must be omitted  # noqa: E501

        :return: The sample_group_id of this ThresholdActionSample.  # noqa: E501
        :rtype: int
        """
        return self._sample_group_id

    @sample_group_id.setter
    def sample_group_id(self, sample_group_id):
        """Sets the sample_group_id of this ThresholdActionSample.

        SampleGroupID is the id of the group that channel is belong to (maximum 2 groups). On this group sample settings of a Wavelet would be applied. This id must be of an existing sample group. In order to set up the stream_id field SampleGroupID field must be omitted  # noqa: E501

        :param sample_group_id: The sample_group_id of this ThresholdActionSample.  # noqa: E501
        :type: int
        """

        self._sample_group_id = sample_group_id

    @property
    def stream_id(self):
        """Gets the stream_id of this ThresholdActionSample.  # noqa: E501

        StreamId is the unique id of the stream to make an action on  # noqa: E501

        :return: The stream_id of this ThresholdActionSample.  # noqa: E501
        :rtype: int
        """
        return self._stream_id

    @stream_id.setter
    def stream_id(self, stream_id):
        """Sets the stream_id of this ThresholdActionSample.

        StreamId is the unique id of the stream to make an action on  # noqa: E501

        :param stream_id: The stream_id of this ThresholdActionSample.  # noqa: E501
        :type: int
        """
        if stream_id is None:
            raise ValueError("Invalid value for `stream_id`, must not be `None`")  # noqa: E501

        self._stream_id = stream_id

    @property
    def type(self):
        """Gets the type of this ThresholdActionSample.  # noqa: E501

        Type of sample action on a group of streams  # noqa: E501

        :return: The type of this ThresholdActionSample.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ThresholdActionSample.

        Type of sample action on a group of streams  # noqa: E501

        :param type: The type of this ThresholdActionSample.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["pause", "resume", "single", "pause_single"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ThresholdActionSample, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ThresholdActionSample):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
