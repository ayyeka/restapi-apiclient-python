# coding: utf-8

"""
    RESTAPI Service

    RESTful API  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SamplegpsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def samplegps_ack_sample_gps_batch(self, sample_id, **kwargs):  # noqa: E501
        """ackSampleGPSBatch samplegps  # noqa: E501

        Notify which Sample GPS was the Last Sample GPS Received by the Client  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.samplegps_ack_sample_gps_batch(sample_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_id: The value to set in the last delivered sample GPS id internal field (required)
        :param str agent: User-Agent information, stored in the cloud to identify the applications that use the sampleGPSs batch APIs
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.samplegps_ack_sample_gps_batch_with_http_info(sample_id, **kwargs)  # noqa: E501
        else:
            (data) = self.samplegps_ack_sample_gps_batch_with_http_info(sample_id, **kwargs)  # noqa: E501
            return data

    def samplegps_ack_sample_gps_batch_with_http_info(self, sample_id, **kwargs):  # noqa: E501
        """ackSampleGPSBatch samplegps  # noqa: E501

        Notify which Sample GPS was the Last Sample GPS Received by the Client  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.samplegps_ack_sample_gps_batch_with_http_info(sample_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_id: The value to set in the last delivered sample GPS id internal field (required)
        :param str agent: User-Agent information, stored in the cloud to identify the applications that use the sampleGPSs batch APIs
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sample_id', 'agent']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method samplegps_ack_sample_gps_batch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sample_id' is set
        if ('sample_id' not in params or
                params['sample_id'] is None):
            raise ValueError("Missing the required parameter `sample_id` when calling `samplegps_ack_sample_gps_batch`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sample_id' in params:
            query_params.append(('sampleId', params['sample_id']))  # noqa: E501
        if 'agent' in params:
            query_params.append(('agent', params['agent']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwt_header_Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/sample/gps/batch/ack', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def samplegps_get_gpsby_device_id(self, device_id, **kwargs):  # noqa: E501
        """getGPSByDeviceId samplegps  # noqa: E501

        Returns GPS information about specified device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.samplegps_get_gpsby_device_id(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: ID of the device whose GPS data should be returned (required)
        :return: AkapiStoredSampleGps
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.samplegps_get_gpsby_device_id_with_http_info(device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.samplegps_get_gpsby_device_id_with_http_info(device_id, **kwargs)  # noqa: E501
            return data

    def samplegps_get_gpsby_device_id_with_http_info(self, device_id, **kwargs):  # noqa: E501
        """getGPSByDeviceId samplegps  # noqa: E501

        Returns GPS information about specified device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.samplegps_get_gpsby_device_id_with_http_info(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: ID of the device whose GPS data should be returned (required)
        :return: AkapiStoredSampleGps
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method samplegps_get_gpsby_device_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `samplegps_get_gpsby_device_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwt_header_Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/device/id/{deviceId}/sample/gps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AkapiStoredSampleGps',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def samplegps_get_samples_gps_batch(self, **kwargs):  # noqa: E501
        """getSamplesGPSBatch samplegps  # noqa: E501

        Get a Batch of New Samples GPS  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.samplegps_get_samples_gps_batch(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool enable_ack: If set to false, then the internal last delivered sample GPS id value is set to the last sample GPS ID in the batch sent in response to this call. If set to true, then the internal last delivered sample GPS id remains untouched by this call. We recommend setting this parameter to 'true' and calling ackSamplesGPSBatch to update the last delivered sample GPS id field
        :param int sample_id: Specifies to send samples GPS with an ID number strictly higher than the sampleID. For example, if the sampleID value is 1234, the response could include samples GPS with IDs such as [1235, 1240, 1241]
        :param int backfill_hours: Specifies to send samples GPS starting this many hours ago. For example, if the backfillHours value is 24, this is a request to provide all samples GPS of the past 24 hours
        :return: StoredSampleGPSBatch
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.samplegps_get_samples_gps_batch_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.samplegps_get_samples_gps_batch_with_http_info(**kwargs)  # noqa: E501
            return data

    def samplegps_get_samples_gps_batch_with_http_info(self, **kwargs):  # noqa: E501
        """getSamplesGPSBatch samplegps  # noqa: E501

        Get a Batch of New Samples GPS  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.samplegps_get_samples_gps_batch_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool enable_ack: If set to false, then the internal last delivered sample GPS id value is set to the last sample GPS ID in the batch sent in response to this call. If set to true, then the internal last delivered sample GPS id remains untouched by this call. We recommend setting this parameter to 'true' and calling ackSamplesGPSBatch to update the last delivered sample GPS id field
        :param int sample_id: Specifies to send samples GPS with an ID number strictly higher than the sampleID. For example, if the sampleID value is 1234, the response could include samples GPS with IDs such as [1235, 1240, 1241]
        :param int backfill_hours: Specifies to send samples GPS starting this many hours ago. For example, if the backfillHours value is 24, this is a request to provide all samples GPS of the past 24 hours
        :return: StoredSampleGPSBatch
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['enable_ack', 'sample_id', 'backfill_hours']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method samplegps_get_samples_gps_batch" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'enable_ack' in params:
            query_params.append(('enableAck', params['enable_ack']))  # noqa: E501
        if 'sample_id' in params:
            query_params.append(('sampleID', params['sample_id']))  # noqa: E501
        if 'backfill_hours' in params:
            query_params.append(('backfillHours', params['backfill_hours']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwt_header_Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/sample/gps/batch', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StoredSampleGPSBatch',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def samplegps_get_samples_gps_batch_by_stream(self, stream_id, sample_date, **kwargs):  # noqa: E501
        """getSamplesGPSBatchByStream samplegps  # noqa: E501

        Get a Batch of New Samples GPS by stream id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.samplegps_get_samples_gps_batch_by_stream(stream_id, sample_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int stream_id: ID of the stream whose recent samples GPS should be returned (required)
        :param int sample_date: The sampling date and time of the oldest sample GPS in the batch (Epoch timestamp >946688460) (required)
        :return: StoredSampleGPSBatch
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.samplegps_get_samples_gps_batch_by_stream_with_http_info(stream_id, sample_date, **kwargs)  # noqa: E501
        else:
            (data) = self.samplegps_get_samples_gps_batch_by_stream_with_http_info(stream_id, sample_date, **kwargs)  # noqa: E501
            return data

    def samplegps_get_samples_gps_batch_by_stream_with_http_info(self, stream_id, sample_date, **kwargs):  # noqa: E501
        """getSamplesGPSBatchByStream samplegps  # noqa: E501

        Get a Batch of New Samples GPS by stream id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.samplegps_get_samples_gps_batch_by_stream_with_http_info(stream_id, sample_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int stream_id: ID of the stream whose recent samples GPS should be returned (required)
        :param int sample_date: The sampling date and time of the oldest sample GPS in the batch (Epoch timestamp >946688460) (required)
        :return: StoredSampleGPSBatch
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stream_id', 'sample_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method samplegps_get_samples_gps_batch_by_stream" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stream_id' is set
        if ('stream_id' not in params or
                params['stream_id'] is None):
            raise ValueError("Missing the required parameter `stream_id` when calling `samplegps_get_samples_gps_batch_by_stream`")  # noqa: E501
        # verify the required parameter 'sample_date' is set
        if ('sample_date' not in params or
                params['sample_date'] is None):
            raise ValueError("Missing the required parameter `sample_date` when calling `samplegps_get_samples_gps_batch_by_stream`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'stream_id' in params:
            path_params['streamId'] = params['stream_id']  # noqa: E501

        query_params = []
        if 'sample_date' in params:
            query_params.append(('sampleDate', params['sample_date']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwt_header_Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/stream/{streamId}/sample/gps/batch', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StoredSampleGPSBatch',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
