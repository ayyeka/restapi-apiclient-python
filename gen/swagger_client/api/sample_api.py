# coding: utf-8

"""
    RESTAPI Service

    RESTful API  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SampleApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def sample_ack_sample_scalar_batch(self, sample_id, **kwargs):  # noqa: E501
        """ackSampleScalarBatch sample  # noqa: E501

        Notify which Sample was the Last Sample Received by the Client  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_ack_sample_scalar_batch(sample_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_id: The value to set in the last delivered sample id internal field (required)
        :param str agent: User-Agent information, stored in the cloud to identify the applications that use the samples batch APIs
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_ack_sample_scalar_batch_with_http_info(sample_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_ack_sample_scalar_batch_with_http_info(sample_id, **kwargs)  # noqa: E501
            return data

    def sample_ack_sample_scalar_batch_with_http_info(self, sample_id, **kwargs):  # noqa: E501
        """ackSampleScalarBatch sample  # noqa: E501

        Notify which Sample was the Last Sample Received by the Client  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_ack_sample_scalar_batch_with_http_info(sample_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_id: The value to set in the last delivered sample id internal field (required)
        :param str agent: User-Agent information, stored in the cloud to identify the applications that use the samples batch APIs
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sample_id', 'agent']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_ack_sample_scalar_batch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sample_id' is set
        if ('sample_id' not in params or
                params['sample_id'] is None):
            raise ValueError("Missing the required parameter `sample_id` when calling `sample_ack_sample_scalar_batch`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sample_id' in params:
            query_params.append(('sampleId', params['sample_id']))  # noqa: E501
        if 'agent' in params:
            query_params.append(('agent', params['agent']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwt_header_Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/sample/batch/ack', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_get_last_sample_scalar_batch(self, **kwargs):  # noqa: E501
        """getLastSampleScalarBatch sample  # noqa: E501

        Get the Last Delivered Sample of the Last Delivered SamplesScalar Batch  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_get_last_sample_scalar_batch(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: StoredSampleScalar
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_get_last_sample_scalar_batch_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.sample_get_last_sample_scalar_batch_with_http_info(**kwargs)  # noqa: E501
            return data

    def sample_get_last_sample_scalar_batch_with_http_info(self, **kwargs):  # noqa: E501
        """getLastSampleScalarBatch sample  # noqa: E501

        Get the Last Delivered Sample of the Last Delivered SamplesScalar Batch  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_get_last_sample_scalar_batch_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: StoredSampleScalar
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_get_last_sample_scalar_batch" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwt_header_Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/sample/batch/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StoredSampleScalar',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_get_last_sample_scalar_by_stream(self, stream_id, **kwargs):  # noqa: E501
        """getLastSampleScalarByStream sample  # noqa: E501

        Get Last Sample from Stream  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_get_last_sample_scalar_by_stream(stream_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int stream_id: ID of the stream whose last sample should be returned (required)
        :return: StoredSampleScalar
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_get_last_sample_scalar_by_stream_with_http_info(stream_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_get_last_sample_scalar_by_stream_with_http_info(stream_id, **kwargs)  # noqa: E501
            return data

    def sample_get_last_sample_scalar_by_stream_with_http_info(self, stream_id, **kwargs):  # noqa: E501
        """getLastSampleScalarByStream sample  # noqa: E501

        Get Last Sample from Stream  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_get_last_sample_scalar_by_stream_with_http_info(stream_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int stream_id: ID of the stream whose last sample should be returned (required)
        :return: StoredSampleScalar
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stream_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_get_last_sample_scalar_by_stream" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stream_id' is set
        if ('stream_id' not in params or
                params['stream_id'] is None):
            raise ValueError("Missing the required parameter `stream_id` when calling `sample_get_last_sample_scalar_by_stream`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'stream_id' in params:
            path_params['streamId'] = params['stream_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwt_header_Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/stream/{streamId}/sample/last', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StoredSampleScalar',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_get_samples_scalar_aggregation_by_stream_and_date_range(self, stream_id, time_frame, from_date, to_date, **kwargs):  # noqa: E501
        """getSamplesScalarAggregationByStreamAndDateRange sample  # noqa: E501

        Returns samples aggregation from specified stream and date range  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_get_samples_scalar_aggregation_by_stream_and_date_range(stream_id, time_frame, from_date, to_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int stream_id: ID of the stream whose samples should be returned (required)
        :param int time_frame: Time Frame of the aggregation 10 15 20 30 or 60 minutes (required)
        :param int from_date: From date and time (Unix time, seconds since January 1, 1970 UTC.) (required)
        :param int to_date: To date and time (Unix time, seconds since January 1, 1970 UTC.) (required)
        :return: StoredSampleScalarAggregationBatch
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_get_samples_scalar_aggregation_by_stream_and_date_range_with_http_info(stream_id, time_frame, from_date, to_date, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_get_samples_scalar_aggregation_by_stream_and_date_range_with_http_info(stream_id, time_frame, from_date, to_date, **kwargs)  # noqa: E501
            return data

    def sample_get_samples_scalar_aggregation_by_stream_and_date_range_with_http_info(self, stream_id, time_frame, from_date, to_date, **kwargs):  # noqa: E501
        """getSamplesScalarAggregationByStreamAndDateRange sample  # noqa: E501

        Returns samples aggregation from specified stream and date range  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_get_samples_scalar_aggregation_by_stream_and_date_range_with_http_info(stream_id, time_frame, from_date, to_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int stream_id: ID of the stream whose samples should be returned (required)
        :param int time_frame: Time Frame of the aggregation 10 15 20 30 or 60 minutes (required)
        :param int from_date: From date and time (Unix time, seconds since January 1, 1970 UTC.) (required)
        :param int to_date: To date and time (Unix time, seconds since January 1, 1970 UTC.) (required)
        :return: StoredSampleScalarAggregationBatch
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stream_id', 'time_frame', 'from_date', 'to_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_get_samples_scalar_aggregation_by_stream_and_date_range" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stream_id' is set
        if ('stream_id' not in params or
                params['stream_id'] is None):
            raise ValueError("Missing the required parameter `stream_id` when calling `sample_get_samples_scalar_aggregation_by_stream_and_date_range`")  # noqa: E501
        # verify the required parameter 'time_frame' is set
        if ('time_frame' not in params or
                params['time_frame'] is None):
            raise ValueError("Missing the required parameter `time_frame` when calling `sample_get_samples_scalar_aggregation_by_stream_and_date_range`")  # noqa: E501
        # verify the required parameter 'from_date' is set
        if ('from_date' not in params or
                params['from_date'] is None):
            raise ValueError("Missing the required parameter `from_date` when calling `sample_get_samples_scalar_aggregation_by_stream_and_date_range`")  # noqa: E501
        # verify the required parameter 'to_date' is set
        if ('to_date' not in params or
                params['to_date'] is None):
            raise ValueError("Missing the required parameter `to_date` when calling `sample_get_samples_scalar_aggregation_by_stream_and_date_range`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'stream_id' in params:
            path_params['streamId'] = params['stream_id']  # noqa: E501

        query_params = []
        if 'time_frame' in params:
            query_params.append(('timeFrame', params['time_frame']))  # noqa: E501
        if 'from_date' in params:
            query_params.append(('fromDate', params['from_date']))  # noqa: E501
        if 'to_date' in params:
            query_params.append(('toDate', params['to_date']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwt_header_Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/stream/{streamId}/sample/agg', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StoredSampleScalarAggregationBatch',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_get_samples_scalar_batch(self, **kwargs):  # noqa: E501
        """getSamplesScalarBatch sample  # noqa: E501

        Get a Batch of New SamplesScalar  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_get_samples_scalar_batch(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool enable_ack: If set to false, then the internal last delivered sample id value is set to the last sample ID in the batch sent in response to this call
        :param int sample_id: Specifies to send samples with an ID number strictly higher than the sampleID. For example, if the sampleID value is 1234, the response could include samples with IDs such as [1235, 1240, 1241]
        :param int backfill_hours: Specifies to send samples starting this many hours ago. For example, if the backfillHours value is 24, this is a request to provide all samples of the past 24 hours
        :return: StoredSampleScalarBatch
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_get_samples_scalar_batch_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.sample_get_samples_scalar_batch_with_http_info(**kwargs)  # noqa: E501
            return data

    def sample_get_samples_scalar_batch_with_http_info(self, **kwargs):  # noqa: E501
        """getSamplesScalarBatch sample  # noqa: E501

        Get a Batch of New SamplesScalar  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_get_samples_scalar_batch_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool enable_ack: If set to false, then the internal last delivered sample id value is set to the last sample ID in the batch sent in response to this call
        :param int sample_id: Specifies to send samples with an ID number strictly higher than the sampleID. For example, if the sampleID value is 1234, the response could include samples with IDs such as [1235, 1240, 1241]
        :param int backfill_hours: Specifies to send samples starting this many hours ago. For example, if the backfillHours value is 24, this is a request to provide all samples of the past 24 hours
        :return: StoredSampleScalarBatch
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['enable_ack', 'sample_id', 'backfill_hours']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_get_samples_scalar_batch" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'enable_ack' in params:
            query_params.append(('enableAck', params['enable_ack']))  # noqa: E501
        if 'sample_id' in params:
            query_params.append(('sampleID', params['sample_id']))  # noqa: E501
        if 'backfill_hours' in params:
            query_params.append(('backfillHours', params['backfill_hours']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwt_header_Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/sample/batch', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StoredSampleScalarBatch',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_get_samples_scalar_batch_by_site(self, site_id, sample_date, **kwargs):  # noqa: E501
        """getSamplesScalarBatchBySite sample  # noqa: E501

        Get Batch of Recent SamplesScalar of a Site  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_get_samples_scalar_batch_by_site(site_id, sample_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: ID of the site whose recent samples should be returned (required)
        :param int sample_date: The sampling date and time of the oldest sample in the batch (Unix time, seconds since January 1, 1970 UTC.) (required)
        :return: StoredSampleScalarBatch
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_get_samples_scalar_batch_by_site_with_http_info(site_id, sample_date, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_get_samples_scalar_batch_by_site_with_http_info(site_id, sample_date, **kwargs)  # noqa: E501
            return data

    def sample_get_samples_scalar_batch_by_site_with_http_info(self, site_id, sample_date, **kwargs):  # noqa: E501
        """getSamplesScalarBatchBySite sample  # noqa: E501

        Get Batch of Recent SamplesScalar of a Site  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_get_samples_scalar_batch_by_site_with_http_info(site_id, sample_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: ID of the site whose recent samples should be returned (required)
        :param int sample_date: The sampling date and time of the oldest sample in the batch (Unix time, seconds since January 1, 1970 UTC.) (required)
        :return: StoredSampleScalarBatch
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'sample_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_get_samples_scalar_batch_by_site" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `sample_get_samples_scalar_batch_by_site`")  # noqa: E501
        # verify the required parameter 'sample_date' is set
        if ('sample_date' not in params or
                params['sample_date'] is None):
            raise ValueError("Missing the required parameter `sample_date` when calling `sample_get_samples_scalar_batch_by_site`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []
        if 'sample_date' in params:
            query_params.append(('sampleDate', params['sample_date']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwt_header_Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/site/{siteId}/sample/batch', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StoredSampleScalarBatch',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_get_samples_scalar_batch_by_stream(self, stream_id, sample_date, **kwargs):  # noqa: E501
        """getSamplesScalarBatchByStream sample  # noqa: E501

        Get Batch of Recent SamplesScalar of a Stream  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_get_samples_scalar_batch_by_stream(stream_id, sample_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int stream_id: ID of the stream whose recent samples should be returned (required)
        :param int sample_date: The sampling date and time of the oldest sample in the batch (Unix time, seconds since January 1, 1970 UTC.) (required)
        :return: StoredSampleScalarBatch
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_get_samples_scalar_batch_by_stream_with_http_info(stream_id, sample_date, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_get_samples_scalar_batch_by_stream_with_http_info(stream_id, sample_date, **kwargs)  # noqa: E501
            return data

    def sample_get_samples_scalar_batch_by_stream_with_http_info(self, stream_id, sample_date, **kwargs):  # noqa: E501
        """getSamplesScalarBatchByStream sample  # noqa: E501

        Get Batch of Recent SamplesScalar of a Stream  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_get_samples_scalar_batch_by_stream_with_http_info(stream_id, sample_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int stream_id: ID of the stream whose recent samples should be returned (required)
        :param int sample_date: The sampling date and time of the oldest sample in the batch (Unix time, seconds since January 1, 1970 UTC.) (required)
        :return: StoredSampleScalarBatch
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stream_id', 'sample_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_get_samples_scalar_batch_by_stream" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stream_id' is set
        if ('stream_id' not in params or
                params['stream_id'] is None):
            raise ValueError("Missing the required parameter `stream_id` when calling `sample_get_samples_scalar_batch_by_stream`")  # noqa: E501
        # verify the required parameter 'sample_date' is set
        if ('sample_date' not in params or
                params['sample_date'] is None):
            raise ValueError("Missing the required parameter `sample_date` when calling `sample_get_samples_scalar_batch_by_stream`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'stream_id' in params:
            path_params['streamId'] = params['stream_id']  # noqa: E501

        query_params = []
        if 'sample_date' in params:
            query_params.append(('sampleDate', params['sample_date']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwt_header_Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/stream/{streamId}/sample/batch', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StoredSampleScalarBatch',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_get_samples_scalar_by_site(self, site_id, **kwargs):  # noqa: E501
        """getSamplesScalarBySite sample  # noqa: E501

        Returns up to 100 samples from the specified site  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_get_samples_scalar_by_site(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: ID of the site whose recent samples should be returned (required)
        :param int last_sample_id: ID of the oldest sample from which to start returning samples
        :return: StoredSampleScalarCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_get_samples_scalar_by_site_with_http_info(site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_get_samples_scalar_by_site_with_http_info(site_id, **kwargs)  # noqa: E501
            return data

    def sample_get_samples_scalar_by_site_with_http_info(self, site_id, **kwargs):  # noqa: E501
        """getSamplesScalarBySite sample  # noqa: E501

        Returns up to 100 samples from the specified site  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_get_samples_scalar_by_site_with_http_info(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: ID of the site whose recent samples should be returned (required)
        :param int last_sample_id: ID of the oldest sample from which to start returning samples
        :return: StoredSampleScalarCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'last_sample_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_get_samples_scalar_by_site" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `sample_get_samples_scalar_by_site`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []
        if 'last_sample_id' in params:
            query_params.append(('lastSampleId', params['last_sample_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwt_header_Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/site/{siteId}/sample', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StoredSampleScalarCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_get_samples_scalar_by_stream(self, stream_id, **kwargs):  # noqa: E501
        """getSamplesScalarByStream sample  # noqa: E501

        Returns up to 100 samples from the specified stream  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_get_samples_scalar_by_stream(stream_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int stream_id: ID of the stream whose recent samples should be returned (required)
        :param int last_sample_id: ID of the oldest sample from which to start returning samples
        :return: StoredSampleScalarCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_get_samples_scalar_by_stream_with_http_info(stream_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_get_samples_scalar_by_stream_with_http_info(stream_id, **kwargs)  # noqa: E501
            return data

    def sample_get_samples_scalar_by_stream_with_http_info(self, stream_id, **kwargs):  # noqa: E501
        """getSamplesScalarByStream sample  # noqa: E501

        Returns up to 100 samples from the specified stream  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_get_samples_scalar_by_stream_with_http_info(stream_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int stream_id: ID of the stream whose recent samples should be returned (required)
        :param int last_sample_id: ID of the oldest sample from which to start returning samples
        :return: StoredSampleScalarCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stream_id', 'last_sample_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_get_samples_scalar_by_stream" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stream_id' is set
        if ('stream_id' not in params or
                params['stream_id'] is None):
            raise ValueError("Missing the required parameter `stream_id` when calling `sample_get_samples_scalar_by_stream`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'stream_id' in params:
            path_params['streamId'] = params['stream_id']  # noqa: E501

        query_params = []
        if 'last_sample_id' in params:
            query_params.append(('lastSampleId', params['last_sample_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwt_header_Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/stream/{streamId}/sample', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StoredSampleScalarCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_get_samples_scalar_by_stream_and_date_range(self, stream_id, from_date, to_date, **kwargs):  # noqa: E501
        """getSamplesScalarByStreamAndDateRange sample  # noqa: E501

        Returns samples from specified stream and date range  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_get_samples_scalar_by_stream_and_date_range(stream_id, from_date, to_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int stream_id: ID of the stream whose samples should be returned (required)
        :param int from_date: From date and time (Unix time, seconds since January 1, 1970 UTC.) (required)
        :param int to_date: To date and time (Unix time, seconds since January 1, 1970 UTC.) (required)
        :param int limit: Limit the number of samples to return
        :param int offset: Get samples starting with an offset, where 1 is the first
        :return: StoredSampleScalarBatch
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_get_samples_scalar_by_stream_and_date_range_with_http_info(stream_id, from_date, to_date, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_get_samples_scalar_by_stream_and_date_range_with_http_info(stream_id, from_date, to_date, **kwargs)  # noqa: E501
            return data

    def sample_get_samples_scalar_by_stream_and_date_range_with_http_info(self, stream_id, from_date, to_date, **kwargs):  # noqa: E501
        """getSamplesScalarByStreamAndDateRange sample  # noqa: E501

        Returns samples from specified stream and date range  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_get_samples_scalar_by_stream_and_date_range_with_http_info(stream_id, from_date, to_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int stream_id: ID of the stream whose samples should be returned (required)
        :param int from_date: From date and time (Unix time, seconds since January 1, 1970 UTC.) (required)
        :param int to_date: To date and time (Unix time, seconds since January 1, 1970 UTC.) (required)
        :param int limit: Limit the number of samples to return
        :param int offset: Get samples starting with an offset, where 1 is the first
        :return: StoredSampleScalarBatch
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stream_id', 'from_date', 'to_date', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_get_samples_scalar_by_stream_and_date_range" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stream_id' is set
        if ('stream_id' not in params or
                params['stream_id'] is None):
            raise ValueError("Missing the required parameter `stream_id` when calling `sample_get_samples_scalar_by_stream_and_date_range`")  # noqa: E501
        # verify the required parameter 'from_date' is set
        if ('from_date' not in params or
                params['from_date'] is None):
            raise ValueError("Missing the required parameter `from_date` when calling `sample_get_samples_scalar_by_stream_and_date_range`")  # noqa: E501
        # verify the required parameter 'to_date' is set
        if ('to_date' not in params or
                params['to_date'] is None):
            raise ValueError("Missing the required parameter `to_date` when calling `sample_get_samples_scalar_by_stream_and_date_range`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'stream_id' in params:
            path_params['streamId'] = params['stream_id']  # noqa: E501

        query_params = []
        if 'from_date' in params:
            query_params.append(('fromDate', params['from_date']))  # noqa: E501
        if 'to_date' in params:
            query_params.append(('toDate', params['to_date']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwt_header_Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/stream/{streamId}/sample/range', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StoredSampleScalarBatch',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_set_backfill_samples_scalar_batch(self, sample_date, **kwargs):  # noqa: E501
        """setBackfillSamplesScalarBatch sample  # noqa: E501

        Reset the DateTime starting point for the next SamplesScalar Batch  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_set_backfill_samples_scalar_batch(sample_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_date: The date and time to use for setting the last delivered sample id internal field (Unix time, seconds since January 1, 1970 UTC.). The API resets the internal last delivered sample id value to the id of the sample whose date and time is closest to the specified date and time (required)
        :param str agent: ser-Agent information, stored in the cloud to identify the applications that use the samples batch APIs
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_set_backfill_samples_scalar_batch_with_http_info(sample_date, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_set_backfill_samples_scalar_batch_with_http_info(sample_date, **kwargs)  # noqa: E501
            return data

    def sample_set_backfill_samples_scalar_batch_with_http_info(self, sample_date, **kwargs):  # noqa: E501
        """setBackfillSamplesScalarBatch sample  # noqa: E501

        Reset the DateTime starting point for the next SamplesScalar Batch  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_set_backfill_samples_scalar_batch_with_http_info(sample_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_date: The date and time to use for setting the last delivered sample id internal field (Unix time, seconds since January 1, 1970 UTC.). The API resets the internal last delivered sample id value to the id of the sample whose date and time is closest to the specified date and time (required)
        :param str agent: ser-Agent information, stored in the cloud to identify the applications that use the samples batch APIs
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sample_date', 'agent']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_set_backfill_samples_scalar_batch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sample_date' is set
        if ('sample_date' not in params or
                params['sample_date'] is None):
            raise ValueError("Missing the required parameter `sample_date` when calling `sample_set_backfill_samples_scalar_batch`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sample_date' in params:
            query_params.append(('sampleDate', params['sample_date']))  # noqa: E501
        if 'agent' in params:
            query_params.append(('agent', params['agent']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwt_header_Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/sample/batch/backfill', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
